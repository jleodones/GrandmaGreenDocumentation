{
  "api/Global.FakeInputTesting.html": {
    "href": "api/Global.FakeInputTesting.html",
    "title": "Class FakeInputTesting",
    "keywords": "Class FakeInputTesting Inheritance Object FakeInputTesting Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FakeInputTesting : MonoBehaviour"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global",
    "keywords": "Namespace Global Classes FakeInputTesting SetCameraBounds"
  },
  "api/Global.SetCameraBounds.html": {
    "href": "api/Global.SetCameraBounds.html",
    "title": "Class SetCameraBounds",
    "keywords": "Class SetCameraBounds Inheritance Object SetCameraBounds Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SetCameraBounds : MonoBehaviour Fields cameraVolume Declaration public Transform cameraVolume Field Value Type Description Transform vCam Declaration public CinemachineVirtualCamera vCam Field Value Type Description CinemachineVirtualCamera Methods CalculateBounds() Declaration public void CalculateBounds()"
  },
  "api/GrandmaGreen.Audio.AudioSystemBehavior.html": {
    "href": "api/GrandmaGreen.Audio.AudioSystemBehavior.html",
    "title": "Class AudioSystemBehavior",
    "keywords": "Class AudioSystemBehavior Inheritance Object AudioSystemBehavior Namespace : GrandmaGreen.Audio Assembly : cs.temp.dll.dll Syntax public class AudioSystemBehavior : PlayableBehaviour Fields soundContainer Declaration public ASoundContainer soundContainer Field Value Type Description ASoundContainer"
  },
  "api/GrandmaGreen.Audio.AudioSystemClip.html": {
    "href": "api/GrandmaGreen.Audio.AudioSystemClip.html",
    "title": "Class AudioSystemClip",
    "keywords": "Class AudioSystemClip Inheritance Object AudioSystemClip Implements ITimelineClipAsset Namespace : GrandmaGreen.Audio Assembly : cs.temp.dll.dll Syntax [Serializable] public class AudioSystemClip : PlayableAsset Fields SoundContainer Declaration public ASoundContainer SoundContainer Field Value Type Description ASoundContainer Properties clipCaps Declaration public ClipCaps clipCaps { get; } Property Value Type Description ClipCaps Methods CreatePlayable(PlayableGraph, GameObject) Declaration public override Playable CreatePlayable(PlayableGraph graph, GameObject owner) Parameters Type Name Description PlayableGraph graph GameObject owner Returns Type Description Playable Implements ITimelineClipAsset"
  },
  "api/GrandmaGreen.Audio.AudioSystemMixerBehavior.html": {
    "href": "api/GrandmaGreen.Audio.AudioSystemMixerBehavior.html",
    "title": "Class AudioSystemMixerBehavior",
    "keywords": "Class AudioSystemMixerBehavior Inheritance Object AudioSystemMixerBehavior Namespace : GrandmaGreen.Audio Assembly : cs.temp.dll.dll Syntax public class AudioSystemMixerBehavior : PlayableBehaviour Methods ProcessFrame(Playable, FrameData, Object) Declaration public override void ProcessFrame(Playable playable, FrameData info, object playerData) Parameters Type Name Description Playable playable FrameData info Object playerData"
  },
  "api/GrandmaGreen.Audio.AudioSystemTrack.html": {
    "href": "api/GrandmaGreen.Audio.AudioSystemTrack.html",
    "title": "Class AudioSystemTrack",
    "keywords": "Class AudioSystemTrack Inheritance Object AudioSystemTrack Namespace : GrandmaGreen.Audio Assembly : cs.temp.dll.dll Syntax public class AudioSystemTrack : TrackAsset Methods CreateTrackMixer(PlayableGraph, GameObject, Int32) Declaration public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount) Parameters Type Name Description PlayableGraph graph GameObject go Int32 inputCount Returns Type Description Playable"
  },
  "api/GrandmaGreen.Audio.html": {
    "href": "api/GrandmaGreen.Audio.html",
    "title": "Namespace GrandmaGreen.Audio",
    "keywords": "Namespace GrandmaGreen.Audio Classes AudioSystemBehavior AudioSystemClip AudioSystemMixerBehavior AudioSystemTrack"
  },
  "api/GrandmaGreen.Collections.CollectionsSO.html": {
    "href": "api/GrandmaGreen.Collections.CollectionsSO.html",
    "title": "Class CollectionsSO",
    "keywords": "Class CollectionsSO Inheritance Object CollectionsSO Namespace : GrandmaGreen.Collections Assembly : cs.temp.dll.dll Syntax public class CollectionsSO : ScriptableObject Fields items Declaration public List<Item> items Field Value Type Description List < Item >"
  },
  "api/GrandmaGreen.Collections.CSVtoSO.html": {
    "href": "api/GrandmaGreen.Collections.CSVtoSO.html",
    "title": "Class CSVtoSO",
    "keywords": "Class CSVtoSO Inheritance Object CSVtoSO Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.Collections Assembly : cs.temp.dll.dll Syntax public class CSVtoSO Methods GenerateCollectionsSO() Declaration public static void GenerateCollectionsSO()"
  },
  "api/GrandmaGreen.Collections.html": {
    "href": "api/GrandmaGreen.Collections.html",
    "title": "Namespace GrandmaGreen.Collections",
    "keywords": "Namespace GrandmaGreen.Collections Classes CollectionsSO CSVtoSO Item"
  },
  "api/GrandmaGreen.Collections.Item.html": {
    "href": "api/GrandmaGreen.Collections.Item.html",
    "title": "Class Item",
    "keywords": "Class Item Inheritance Object Item Namespace : GrandmaGreen.Collections Assembly : cs.temp.dll.dll Syntax public class Item : MonoBehaviour Fields description Declaration public string description Field Value Type Description String id Declaration public string id Field Value Type Description String name Declaration public string name Field Value Type Description String unlocked Declaration public bool unlocked Field Value Type Description Boolean"
  },
  "api/GrandmaGreen.Entities.EntityBehavior.html": {
    "href": "api/GrandmaGreen.Entities.EntityBehavior.html",
    "title": "Class EntityBehavior",
    "keywords": "Class EntityBehavior Inheritance Object EntityBehavior EntityBehaviorSet FollowPointerBehavior WanderBehavior Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public abstract class EntityBehavior : ScriptableObject Properties prerequisites Declaration public EntityPermissions prerequisites { get; protected set; } Property Value Type Description EntityPermissions Methods PerformInstance(EntityController) Declaration public abstract IEnumerator PerformInstance(EntityController controller) Parameters Type Name Description EntityController controller Returns Type Description IEnumerator"
  },
  "api/GrandmaGreen.Entities.EntityBehaviorSet.html": {
    "href": "api/GrandmaGreen.Entities.EntityBehaviorSet.html",
    "title": "Class EntityBehaviorSet",
    "keywords": "Class EntityBehaviorSet Inheritance Object EntityBehavior EntityBehaviorSet Inherited Members EntityBehavior.prerequisites Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public class EntityBehaviorSet : EntityBehavior Fields Behaviours Declaration public List<EntityBehavior> Behaviours Field Value Type Description List < EntityBehavior > Methods PerformInstance(EntityController) Declaration public override IEnumerator PerformInstance(EntityController controller) Parameters Type Name Description EntityController controller Returns Type Description IEnumerator Overrides EntityBehavior.PerformInstance(EntityController)"
  },
  "api/GrandmaGreen.Entities.EntityBehaviorSetting.html": {
    "href": "api/GrandmaGreen.Entities.EntityBehaviorSetting.html",
    "title": "Struct EntityBehaviorSetting",
    "keywords": "Struct EntityBehaviorSetting Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public struct EntityBehaviorSetting"
  },
  "api/GrandmaGreen.Entities.EntityController.html": {
    "href": "api/GrandmaGreen.Entities.EntityController.html",
    "title": "Class EntityController",
    "keywords": "Class EntityController Inheritance Object EntityController PlayerController Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public class EntityController : ScriptableObject Fields active Declaration public bool active Field Value Type Description Boolean behaviorRoutine Declaration public Coroutine behaviorRoutine Field Value Type Description Coroutine currentBehavior Declaration public EntityBehavior currentBehavior Field Value Type Description EntityBehavior entity Declaration public GameEntity entity Field Value Type Description GameEntity permissions Declaration public EntityPermissions permissions Field Value Type Description EntityPermissions Properties stateMachine Declaration public StateMachine<EntityState> stateMachine { get; } Property Value Type Description StateMachine < EntityState > Methods FindRandomDestination(Int32) Declaration public virtual float3 FindRandomDestination(int range) Parameters Type Name Description Int32 range Returns Type Description float3 PauseController() Declaration public virtual void PauseController() RegisterEntity(GameEntity) Declaration public virtual void RegisterEntity(GameEntity entity) Parameters Type Name Description GameEntity entity SetBehavior(EntityBehavior) Declaration public virtual void SetBehavior(EntityBehavior behavior) Parameters Type Name Description EntityBehavior behavior SetDestination(int2) Declaration public virtual void SetDestination(int2 endPos) Parameters Type Name Description int2 endPos SetDestination(Vector3) Declaration public virtual void SetDestination(Vector3 worldPos) Parameters Type Name Description Vector3 worldPos StartController() Declaration public virtual void StartController()"
  },
  "api/GrandmaGreen.Entities.EntityPermissions.html": {
    "href": "api/GrandmaGreen.Entities.EntityPermissions.html",
    "title": "Enum EntityPermissions",
    "keywords": "Enum EntityPermissions Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax [Flags] public enum EntityPermissions Fields Name Description Gardener Interactable None Pathfinder Speaker"
  },
  "api/GrandmaGreen.Entities.EntityState.html": {
    "href": "api/GrandmaGreen.Entities.EntityState.html",
    "title": "Enum EntityState",
    "keywords": "Enum EntityState Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public enum EntityState Fields Name Description Idle MovingTo PerformingAction"
  },
  "api/GrandmaGreen.Entities.FollowPointerBehavior.html": {
    "href": "api/GrandmaGreen.Entities.FollowPointerBehavior.html",
    "title": "Class FollowPointerBehavior",
    "keywords": "Class FollowPointerBehavior Inheritance Object EntityBehavior FollowPointerBehavior Inherited Members EntityBehavior.prerequisites Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public class FollowPointerBehavior : EntityBehavior Methods PerformInstance(EntityController) Declaration public override IEnumerator PerformInstance(EntityController controller) Parameters Type Name Description EntityController controller Returns Type Description IEnumerator Overrides EntityBehavior.PerformInstance(EntityController) SetPointerLocation(Vector3) Declaration public void SetPointerLocation(Vector3 position) Parameters Type Name Description Vector3 position"
  },
  "api/GrandmaGreen.Entities.GameEntity.html": {
    "href": "api/GrandmaGreen.Entities.GameEntity.html",
    "title": "Class GameEntity",
    "keywords": "Class GameEntity Inheritance Object GameEntity GrandmaEntity Implements IPathAgent IServiceUser < Pathfinder , IPathfinderServicer > Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public class GameEntity : MonoBehaviour, IPathAgent, IServiceUser<Pathfinder, IPathfinderServicer> Fields animator Declaration public Animator animator Field Value Type Description Animator controller Declaration public EntityController controller Field Value Type Description EntityController entityStateMachine Declaration public StateMachine<EntityState> entityStateMachine Field Value Type Description StateMachine < EntityState > smoothFactor Declaration public float smoothFactor Field Value Type Description Single splineFollow Declaration public SplineFollow splineFollow Field Value Type Description SplineFollow Properties isPathing Declaration public bool isPathing { get; } Property Value Type Description Boolean pathfinderServicer Declaration public IPathfinderServicer pathfinderServicer { get; } Property Value Type Description IPathfinderServicer Methods CalculatePathable(Int32) Declaration public float3[] CalculatePathable(int range) Parameters Type Name Description Int32 range Returns Type Description float3 [] CancelPath() Declaration public virtual void CancelPath() CheckPath(int2) Declaration public float3[] CheckPath(int2 endPos) Parameters Type Name Description int2 endPos Returns Type Description float3 [] CheckPath(Vector3) Declaration public float3[] CheckPath(Vector3 worldPos) Parameters Type Name Description Vector3 worldPos Returns Type Description float3 [] CurrentPos() Declaration public virtual Vector3 CurrentPos() Returns Type Description Vector3 FixedUpdate() Declaration public void FixedUpdate() FollowPath(float3[]) Declaration public virtual void FollowPath(float3[] path) Parameters Type Name Description float3 [] path InitalizeStateMachine() Declaration protected virtual void InitalizeStateMachine() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnPathComplete() Declaration public void OnPathComplete() Update() Declaration public void Update() Implements IPathAgent IServiceUser<U, T>"
  },
  "api/GrandmaGreen.Entities.GrandmaEntity.html": {
    "href": "api/GrandmaGreen.Entities.GrandmaEntity.html",
    "title": "Class GrandmaEntity",
    "keywords": "Class GrandmaEntity Inheritance Object GameEntity GrandmaEntity Implements IPathAgent IServiceUser < Pathfinder , IPathfinderServicer > Inherited Members GameEntity.controller GameEntity.animator GameEntity.entityStateMachine GameEntity.splineFollow GameEntity.smoothFactor GameEntity.pathfinderServicer GameEntity.isPathing GameEntity.InitalizeStateMachine() GameEntity.OnEnable() GameEntity.OnDisable() GameEntity.Update() GameEntity.FixedUpdate() GameEntity.CalculatePathable(Int32) GameEntity.CheckPath(int2) GameEntity.CheckPath(Vector3) GameEntity.FollowPath(float3[]) GameEntity.OnPathComplete() GameEntity.CancelPath() GameEntity.CurrentPos() Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public class GrandmaEntity : GameEntity, IPathAgent, IServiceUser<Pathfinder, IPathfinderServicer> Implements IPathAgent IServiceUser<U, T>"
  },
  "api/GrandmaGreen.Entities.html": {
    "href": "api/GrandmaGreen.Entities.html",
    "title": "Namespace GrandmaGreen.Entities",
    "keywords": "Namespace GrandmaGreen.Entities Classes EntityBehavior EntityBehaviorSet EntityController FollowPointerBehavior GameEntity GrandmaEntity PlayerController WanderBehavior Structs EntityBehaviorSetting Enums EntityPermissions EntityState"
  },
  "api/GrandmaGreen.Entities.PlayerController.html": {
    "href": "api/GrandmaGreen.Entities.PlayerController.html",
    "title": "Class PlayerController",
    "keywords": "Class PlayerController Inheritance Object EntityController PlayerController Inherited Members EntityController.permissions EntityController.currentBehavior EntityController.entity EntityController.stateMachine EntityController.active EntityController.behaviorRoutine EntityController.RegisterEntity(GameEntity) EntityController.SetDestination(Vector3) EntityController.SetDestination(int2) EntityController.FindRandomDestination(Int32) EntityController.SetBehavior(EntityBehavior) Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public class PlayerController : EntityController Methods PauseController() Declaration public override void PauseController() Overrides EntityController.PauseController() StartController() Declaration public override void StartController() Overrides EntityController.StartController()"
  },
  "api/GrandmaGreen.Entities.WanderBehavior.html": {
    "href": "api/GrandmaGreen.Entities.WanderBehavior.html",
    "title": "Class WanderBehavior",
    "keywords": "Class WanderBehavior Inheritance Object EntityBehavior WanderBehavior Inherited Members EntityBehavior.prerequisites Namespace : GrandmaGreen.Entities Assembly : cs.temp.dll.dll Syntax public class WanderBehavior : EntityBehavior Fields delay Declaration public float delay Field Value Type Description Single range Declaration public int range Field Value Type Description Int32 Methods PerformInstance(EntityController) Declaration public override IEnumerator PerformInstance(EntityController controller) Parameters Type Name Description EntityController controller Returns Type Description IEnumerator Overrides EntityBehavior.PerformInstance(EntityController)"
  },
  "api/GrandmaGreen.GameSystemDummy.html": {
    "href": "api/GrandmaGreen.GameSystemDummy.html",
    "title": "Class GameSystemDummy",
    "keywords": "Class GameSystemDummy Inheritance Object GameSystemDummy Namespace : GrandmaGreen Assembly : cs.temp.dll.dll Syntax public class GameSystemDummy : MonoBehaviour Methods AddTrait() Declaration public void AddTrait() SampleTest() Declaration public int SampleTest() Returns Type Description Int32"
  },
  "api/GrandmaGreen.Garden.Allele.html": {
    "href": "api/GrandmaGreen.Garden.Allele.html",
    "title": "Enum Allele",
    "keywords": "Enum Allele Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public enum Allele Fields Name Description dominant recessive"
  },
  "api/GrandmaGreen.Garden.BasePhenotypeData.html": {
    "href": "api/GrandmaGreen.Garden.BasePhenotypeData.html",
    "title": "Class BasePhenotypeData",
    "keywords": "Class BasePhenotypeData Inheritance Object BasePhenotypeData FlowerPhenotypeData Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public abstract class BasePhenotypeData : ScriptableObject Fields traitList Declaration protected ITraitSetData[] traitList Field Value Type Description ITraitSetData [] Properties TraitCount Declaration public virtual int TraitCount { get; } Property Value Type Description Int32 TraitList Declaration public ITraitSetData[] TraitList { get; } Property Value Type Description ITraitSetData [] Methods SetTraitData() Declaration public abstract void SetTraitData() Trait<T>(Int32) Declaration public virtual T Trait<T>(int index) where T : class, ITraitSetData Parameters Type Name Description Int32 index Returns Type Description T Type Parameters Name Description T"
  },
  "api/GrandmaGreen.Garden.ColorSet.html": {
    "href": "api/GrandmaGreen.Garden.ColorSet.html",
    "title": "Class ColorSet",
    "keywords": "Class ColorSet Inheritance Object TraitSetData < Color > ColorSet Implements ITraitSetData Inherited Members TraitSetData<Color>.weight TraitSetData<Color>.recessive TraitSetData<Color>.dominant TraitSetData<Color>.mixed TraitSetData<Color>.ITraitSetData.weight TraitSetData<Color>.type TraitSetData<Color>.ITraitSetData.recessive TraitSetData<Color>.ITraitSetData.dominant TraitSetData<Color>.ITraitSetData.mixed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class ColorSet : TraitSetData<Color>, ITraitSetData Implements ITraitSetData"
  },
  "api/GrandmaGreen.Garden.FlowerPhenotypeData.html": {
    "href": "api/GrandmaGreen.Garden.FlowerPhenotypeData.html",
    "title": "Class FlowerPhenotypeData",
    "keywords": "Class FlowerPhenotypeData Inheritance Object BasePhenotypeData FlowerPhenotypeData Inherited Members BasePhenotypeData.traitList BasePhenotypeData.TraitList BasePhenotypeData.Trait<T>(Int32) Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class FlowerPhenotypeData : BasePhenotypeData Properties TraitCount Declaration public override int TraitCount { get; } Property Value Type Description Int32 Overrides BasePhenotypeData.TraitCount Methods SetTraitData() Declaration public override void SetTraitData() Overrides BasePhenotypeData.SetTraitData()"
  },
  "api/GrandmaGreen.Garden.GardenAreaController.html": {
    "href": "api/GrandmaGreen.Garden.GardenAreaController.html",
    "title": "Class GardenAreaController",
    "keywords": "Class GardenAreaController TODO: Implement functionality for save/loading changed tiles Inheritance Object GardenAreaController Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class GardenAreaController : MonoBehaviour Fields areaBounds Declaration public Collider areaBounds Field Value Type Description Collider areaServicer Declaration public GardenAreaServicer areaServicer Field Value Type Description GardenAreaServicer gardenData Declaration public GardenData gardenData Field Value Type Description GardenData pathfinder Declaration public Pathfinder pathfinder Field Value Type Description Pathfinder plantInteractablePrefab Declaration public PlantInteractable plantInteractablePrefab Field Value Type Description PlantInteractable tilemap Declaration public Tilemap tilemap Field Value Type Description Tilemap Properties currentSelection Declaration public GameObject currentSelection { get; } Property Value Type Description GameObject Methods BakeNavGrid() Declaration public void BakeNavGrid() GardenSelection(Vector3) Declaration public void GardenSelection(Vector3 worldPos) Parameters Type Name Description Vector3 worldPos Harvest(BasePhenotypeData, Genotype) Declaration public void Harvest(BasePhenotypeData phenotypeData, Genotype genotype) Parameters Type Name Description BasePhenotypeData phenotypeData Genotype genotype ParseTilemap() Declaration public void ParseTilemap() PlantInteraction() Declaration public void PlantInteraction() Events onGardenSelection Declaration public event Action<Vector2Int> onGardenSelection Event Type Type Description Action < Vector2Int >"
  },
  "api/GrandmaGreen.Garden.GardenAreaServicer.html": {
    "href": "api/GrandmaGreen.Garden.GardenAreaServicer.html",
    "title": "Class GardenAreaServicer",
    "keywords": "Class GardenAreaServicer Inheritance Object GardenAreaServicer Implements IPathfinderServicer IServicer < Pathfinder > Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class GardenAreaServicer : ScriptableObject, IPathfinderServicer, IServicer<Pathfinder> Methods DeregisterService(Pathfinder) Declaration public void DeregisterService(Pathfinder pathfinder) Parameters Type Name Description Pathfinder pathfinder DesregisterAreaController(GardenAreaController) Declaration public void DesregisterAreaController(GardenAreaController areaController) Parameters Type Name Description GardenAreaController areaController RegisterAreaController(GardenAreaController) Declaration public void RegisterAreaController(GardenAreaController areaController) Parameters Type Name Description GardenAreaController areaController RegisterService(Pathfinder) Declaration public void RegisterService(Pathfinder pathfinder) Parameters Type Name Description Pathfinder pathfinder StartServices() Declaration public void StartServices() StopServices() Declaration public void StopServices() Implements IPathfinderServicer IServicer<T>"
  },
  "api/GrandmaGreen.Garden.GardenData.html": {
    "href": "api/GrandmaGreen.Garden.GardenData.html",
    "title": "Class GardenData",
    "keywords": "Class GardenData Inheritance Object GardenData Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class GardenData : ScriptableObject Fields cellSize Declaration public Vector2 cellSize Field Value Type Description Vector2 gridSize Declaration public Vector2Int gridSize Field Value Type Description Vector2Int plantStates Declaration public List<PlantState> plantStates Field Value Type Description List < PlantState > worldOrigin Declaration public Vector3 worldOrigin Field Value Type Description Vector3 Methods IndexToWorldPos(Int32) Declaration public Vector3 IndexToWorldPos(int index) Parameters Type Name Description Int32 index Returns Type Description Vector3 WorldToGrid(Vector3) Declaration public Vector2Int WorldToGrid(Vector3 position) Parameters Type Name Description Vector3 position Returns Type Description Vector2Int"
  },
  "api/GrandmaGreen.Garden.GardenPlant.html": {
    "href": "api/GrandmaGreen.Garden.GardenPlant.html",
    "title": "Class GardenPlant",
    "keywords": "Class GardenPlant PLACEHOLDER GARDEN PLANT TO BE REPLACED BY PLANTINTERACTBALE Inheritance Object GardenPlant Implements IGameInteractable Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class GardenPlant : MonoBehaviour Fields childGenotype Declaration public Genotype childGenotype Field Value Type Description Genotype genotype Declaration public Genotype genotype Field Value Type Description Genotype neighbours Declaration public List<GardenPlant> neighbours Field Value Type Description List < GardenPlant > phenotypeData Declaration public BasePhenotypeData phenotypeData Field Value Type Description BasePhenotypeData plantSprite Declaration public SpriteRenderer plantSprite Field Value Type Description SpriteRenderer punnetSquare Declaration public List<Genotype> punnetSquare Field Value Type Description List < Genotype > traitList Declaration public ITraitSetData[] traitList Field Value Type Description ITraitSetData [] Methods DoInteraction(Vector3, PointerState) Declaration public void DoInteraction(Vector3 interactionPoint, PointerState interactionState) Parameters Type Name Description Vector3 interactionPoint PointerState interactionState Harvest() Declaration public void Harvest() Implements IGameInteractable"
  },
  "api/GrandmaGreen.Garden.Genotype.html": {
    "href": "api/GrandmaGreen.Garden.Genotype.html",
    "title": "Class Genotype",
    "keywords": "Class Genotype Inheritance Object Genotype Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax [Serializable] public class Genotype Constructors Genotype() Declaration public Genotype() Fields MAX_TRAIT_COUNT Declaration public static readonly int MAX_TRAIT_COUNT Field Value Type Description Int32 Properties Item[Int32] Declaration public Trait this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description Trait"
  },
  "api/GrandmaGreen.Garden.html": {
    "href": "api/GrandmaGreen.Garden.html",
    "title": "Namespace GrandmaGreen.Garden",
    "keywords": "Namespace GrandmaGreen.Garden Classes BasePhenotypeData ColorSet FlowerPhenotypeData GardenAreaController TODO: Implement functionality for save/loading changed tiles GardenAreaServicer GardenData GardenPlant PLACEHOLDER GARDEN PLANT TO BE REPLACED BY PLANTINTERACTBALE Genotype PlantInteractable SizeSet TraitData<T> TraitSetData<T> Structs PlantState Trait Interfaces ITraitData ITraitSetData Enums Allele"
  },
  "api/GrandmaGreen.Garden.ITraitData.html": {
    "href": "api/GrandmaGreen.Garden.ITraitData.html",
    "title": "Interface ITraitData",
    "keywords": "Interface ITraitData Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public interface ITraitData Properties type Declaration Type type { get; } Property Value Type Description Type"
  },
  "api/GrandmaGreen.Garden.ITraitSetData.html": {
    "href": "api/GrandmaGreen.Garden.ITraitSetData.html",
    "title": "Interface ITraitSetData",
    "keywords": "Interface ITraitSetData Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public interface ITraitSetData Properties dominant Declaration ITraitData dominant { get; } Property Value Type Description ITraitData mixed Declaration ITraitData mixed { get; } Property Value Type Description ITraitData recessive Declaration ITraitData recessive { get; } Property Value Type Description ITraitData type Declaration Type type { get; } Property Value Type Description Type weight Declaration int weight { get; } Property Value Type Description Int32"
  },
  "api/GrandmaGreen.Garden.PlantInteractable.html": {
    "href": "api/GrandmaGreen.Garden.PlantInteractable.html",
    "title": "Class PlantInteractable",
    "keywords": "Class PlantInteractable Inheritance Object PlantInteractable Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class PlantInteractable : MonoBehaviour"
  },
  "api/GrandmaGreen.Garden.PlantState.html": {
    "href": "api/GrandmaGreen.Garden.PlantState.html",
    "title": "Struct PlantState",
    "keywords": "Struct PlantState Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax [Serializable] public struct PlantState Fields genotype Declaration public Genotype genotype Field Value Type Description Genotype gridIndex Declaration public int gridIndex Field Value Type Description Int32 phenotypeIndex Declaration public int phenotypeIndex Field Value Type Description Int32"
  },
  "api/GrandmaGreen.Garden.SizeSet.html": {
    "href": "api/GrandmaGreen.Garden.SizeSet.html",
    "title": "Class SizeSet",
    "keywords": "Class SizeSet Inheritance Object TraitSetData < Single > SizeSet Implements ITraitSetData Inherited Members TraitSetData<Single>.weight TraitSetData<Single>.recessive TraitSetData<Single>.dominant TraitSetData<Single>.mixed TraitSetData<Single>.ITraitSetData.weight TraitSetData<Single>.type TraitSetData<Single>.ITraitSetData.recessive TraitSetData<Single>.ITraitSetData.dominant TraitSetData<Single>.ITraitSetData.mixed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class SizeSet : TraitSetData<float>, ITraitSetData Implements ITraitSetData"
  },
  "api/GrandmaGreen.Garden.Trait.html": {
    "href": "api/GrandmaGreen.Garden.Trait.html",
    "title": "Struct Trait",
    "keywords": "Struct Trait Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax [Serializable] public struct Trait Fields allele1 Declaration public Allele allele1 Field Value Type Description Allele allele2 Declaration public Allele allele2 Field Value Type Description Allele"
  },
  "api/GrandmaGreen.Garden.TraitData-1.html": {
    "href": "api/GrandmaGreen.Garden.TraitData-1.html",
    "title": "Class TraitData<T>",
    "keywords": "Class TraitData<T> Inheritance Object TraitData<T> Implements ITraitData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class TraitData<T> : ITraitData where T : struct Type Parameters Name Description T Fields value Declaration public T value Field Value Type Description T Properties type Declaration public Type type { get; } Property Value Type Description Type Implements ITraitData"
  },
  "api/GrandmaGreen.Garden.TraitSetData-1.html": {
    "href": "api/GrandmaGreen.Garden.TraitSetData-1.html",
    "title": "Class TraitSetData<T>",
    "keywords": "Class TraitSetData<T> Inheritance Object TraitSetData<T> ColorSet SizeSet Implements ITraitSetData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.Garden Assembly : cs.temp.dll.dll Syntax public class TraitSetData<T> : ITraitSetData where T : struct Type Parameters Name Description T Fields weight Declaration public int weight Field Value Type Description Int32 Properties dominant Declaration public TraitData<T> dominant { get; } Property Value Type Description TraitData <T> mixed Declaration public TraitData<T> mixed { get; } Property Value Type Description TraitData <T> recessive Declaration public TraitData<T> recessive { get; } Property Value Type Description TraitData <T> type Declaration public Type type { get; } Property Value Type Description Type Explicit Interface Implementations ITraitSetData.dominant Declaration ITraitData ITraitSetData.dominant { get; } Returns Type Description ITraitData ITraitSetData.mixed Declaration ITraitData ITraitSetData.mixed { get; } Returns Type Description ITraitData ITraitSetData.recessive Declaration ITraitData ITraitSetData.recessive { get; } Returns Type Description ITraitData ITraitSetData.weight Declaration int ITraitSetData.weight { get; } Returns Type Description Int32 Implements ITraitSetData"
  },
  "api/GrandmaGreen.html": {
    "href": "api/GrandmaGreen.html",
    "title": "Namespace GrandmaGreen",
    "keywords": "Namespace GrandmaGreen Classes GameSystemDummy Interfaces IPathAgent IPathfinderServicer IServicer<T> IServiceUser<U, T>"
  },
  "api/GrandmaGreen.IPathAgent.html": {
    "href": "api/GrandmaGreen.IPathAgent.html",
    "title": "Interface IPathAgent",
    "keywords": "Interface IPathAgent Inherited Members IServiceUser<Pathfinder, IPathfinderServicer>.Servicer IServiceUser<Pathfinder, IPathfinderServicer>.SetServicer(IPathfinderServicer) IServiceUser<Pathfinder, IPathfinderServicer>.ClearServicer() Namespace : GrandmaGreen Assembly : cs.temp.dll.dll Syntax public interface IPathAgent : IServiceUser<Pathfinder, IPathfinderServicer> Properties isPathing Declaration bool isPathing { get; } Property Value Type Description Boolean Methods CalculatePathable(Int32) Declaration float3[] CalculatePathable(int range) Parameters Type Name Description Int32 range Returns Type Description float3 [] CheckPath(int2) Declaration float3[] CheckPath(int2 destination) Parameters Type Name Description int2 destination Returns Type Description float3 [] CurrentPos() Declaration Vector3 CurrentPos() Returns Type Description Vector3 FollowPath(float3[]) Declaration void FollowPath(float3[] path) Parameters Type Name Description float3 [] path"
  },
  "api/GrandmaGreen.IPathfinderServicer.html": {
    "href": "api/GrandmaGreen.IPathfinderServicer.html",
    "title": "Interface IPathfinderServicer",
    "keywords": "Interface IPathfinderServicer Inherited Members IServicer<Pathfinder>.s_activeServices IServicer<Pathfinder>.RegisterService(Pathfinder) IServicer<Pathfinder>.DeregisterService(Pathfinder) IServicer<Pathfinder>.PrimaryService IServicer<Pathfinder>.Item[Int32] Namespace : GrandmaGreen Assembly : cs.temp.dll.dll Syntax public interface IPathfinderServicer : IServicer<Pathfinder>"
  },
  "api/GrandmaGreen.IServicer-1.html": {
    "href": "api/GrandmaGreen.IServicer-1.html",
    "title": "Interface IServicer<T>",
    "keywords": "Interface IServicer<T> Namespace : GrandmaGreen Assembly : cs.temp.dll.dll Syntax public interface IServicer<T> Type Parameters Name Description T Properties Item[Int32] Declaration virtual T this[int i] { get; } Parameters Type Name Description Int32 i Property Value Type Description T PrimaryService Declaration virtual T PrimaryService { get; } Property Value Type Description T s_activeServices Declaration static List<T> s_activeServices { get; set; } Property Value Type Description List <T> Methods DeregisterService(T) Declaration void DeregisterService(T service) Parameters Type Name Description T service RegisterService(T) Declaration void RegisterService(T service) Parameters Type Name Description T service"
  },
  "api/GrandmaGreen.IServiceUser-2.html": {
    "href": "api/GrandmaGreen.IServiceUser-2.html",
    "title": "Interface IServiceUser<U, T>",
    "keywords": "Interface IServiceUser<U, T> Namespace : GrandmaGreen Assembly : cs.temp.dll.dll Syntax public interface IServiceUser<U, T> where T : IServicer<U> Type Parameters Name Description U T Properties Servicer Declaration static T Servicer { get; } Property Value Type Description T Methods ClearServicer() Declaration static void ClearServicer() SetServicer(T) Declaration static void SetServicer(T servicer) Parameters Type Name Description T servicer"
  },
  "api/GrandmaGreen.SaveSystem.ComponentStore-1.html": {
    "href": "api/GrandmaGreen.SaveSystem.ComponentStore-1.html",
    "title": "Class ComponentStore<T>",
    "keywords": "Class ComponentStore<T> The ComponentStore is a data structure written in pure C#. See IComponentStore. Inheritance Object ComponentStore<T> Implements IComponentStore Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public class ComponentStore<T> : IComponentStore where T : struct Type Parameters Name Description T Constructors ComponentStore() Constructor initializes member variables and does nothing else. Declaration public ComponentStore() Properties components The components in question. Declaration public List<T> components { get; set; } Property Value Type Description List <T> Methods AddComponent(T) Adds a component to its internal storage list. Returns true if successful, false otherwise. Declaration public bool AddComponent(T component) Parameters Type Name Description T component Returns Type Description Boolean GetType() Returns the type of components it stores. Declaration public Type GetType() Returns Type Description Type RemoveComponent<T>(T) Removes a component from its internal storage list. Returns true if successful, false otherwise. Declaration public bool RemoveComponent<T>(T _component) where T : struct Parameters Type Name Description T _component Returns Type Description Boolean Type Parameters Name Description T RequestData<T>(Int32, ref T) Receives data requests from its internal storage list based on a provided index and outputs it through a reference. Returns true if successful, false otherwise. Declaration public bool RequestData<T>(int index, ref T _component) where T : struct Parameters Type Name Description Int32 index T _component Returns Type Description Boolean Type Parameters Name Description T UpdateValue<T>(Int32, T) Updates a given value in its internal storage list based on a provided index. Returns true if successful, false otherwise. Declaration public bool UpdateValue<T>(int index, T _component) where T : struct Parameters Type Name Description Int32 index T _component Returns Type Description Boolean Type Parameters Name Description T Implements IComponentStore"
  },
  "api/GrandmaGreen.SaveSystem.html": {
    "href": "api/GrandmaGreen.SaveSystem.html",
    "title": "Namespace GrandmaGreen.SaveSystem",
    "keywords": "Namespace GrandmaGreen.SaveSystem Classes ComponentStore<T> The ComponentStore is a data structure written in pure C#. See IComponentStore. JSONSaveLoader The JSONSaveLoader was designed specifically to serialize and deserialize JSON files ONLY. This is used largely for internal testing and readable save files, but can be converted to BSON as needed. ObjectSaver The ObjectSaver interfaces with game systems directly when new data is added, changed, or removed as player's navigate the game. It is a ScriptableObject that is the core of the save system, and was designed to be editor friendly. They store pure data. SaveController The SaveController is a purely scripted C# class that gets reinstantiated everytime the game is loaded. The SaveController interfaces directly with SaveLoaders of various types as necessary. When the SaveManager calls for an AutoSave, the SaveController pings each SaveLoader to tell it to save the relevant data. SaveManager The SaveManager class is in charge of high level saving. It is the only part of the save system that lives in the game. Upon awakening, it instantiates a new SaveController. It also tracks the auto save intervals, then pings the SaveController at appropriate moments. The SaveManager also stores an internal list of every ObjectSaver relevant to the whole game. Interfaces IComponentStore The IComponentStore is a wrapper interface for ComponentStores. The purpose of the ComponentStore is to store data at the start of a scene—when data gets loaded–and when gameplay changes any sort of persistent data. Requests for the data stored in the IComponentStore object are handled through IObjectSavers. IObjectSaver The IObjectSaver interface is a wrapper for ObjectSaver Scriptable Objects, which holds a list of IComponentSavers. IObjectSavers are instantiated and registered by SaveControllers upon awakening in a scene. Importantly, IObjectSavers handle data requests from game interfaces. Other game interfaces request the information, and IObjectSavers retrieve the data from IObjectStores to pass it along. Similarly, IObjectSavers take in new data from game interfaces and updates the IObjectStore appropriately. ISaveLoader The ISaveLoader interface is a wrapper interface used for all SaveLoaders."
  },
  "api/GrandmaGreen.SaveSystem.IComponentStore.html": {
    "href": "api/GrandmaGreen.SaveSystem.IComponentStore.html",
    "title": "Interface IComponentStore",
    "keywords": "Interface IComponentStore The IComponentStore is a wrapper interface for ComponentStores. The purpose of the ComponentStore is to store data at the start of a scene—when data gets loaded–and when gameplay changes any sort of persistent data. Requests for the data stored in the IComponentStore object are handled through IObjectSavers. Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public interface IComponentStore Methods GetType() Returns the type of the ComponentStore. Declaration Type GetType() Returns Type Description Type"
  },
  "api/GrandmaGreen.SaveSystem.IObjectSaver.html": {
    "href": "api/GrandmaGreen.SaveSystem.IObjectSaver.html",
    "title": "Interface IObjectSaver",
    "keywords": "Interface IObjectSaver The IObjectSaver interface is a wrapper for ObjectSaver Scriptable Objects, which holds a list of IComponentSavers. IObjectSavers are instantiated and registered by SaveControllers upon awakening in a scene. Importantly, IObjectSavers handle data requests from game interfaces. Other game interfaces request the information, and IObjectSavers retrieve the data from IObjectStores to pass it along. Similarly, IObjectSavers take in new data from game interfaces and updates the IObjectStore appropriately. Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public interface IObjectSaver Properties componentStores The component store in question. Declaration List<IComponentStore> componentStores { get; set; } Property Value Type Description List < IComponentStore >"
  },
  "api/GrandmaGreen.SaveSystem.ISaveLoader.html": {
    "href": "api/GrandmaGreen.SaveSystem.ISaveLoader.html",
    "title": "Interface ISaveLoader",
    "keywords": "Interface ISaveLoader The ISaveLoader interface is a wrapper interface used for all SaveLoaders. Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public interface ISaveLoader Methods LoadAllData(List<ObjectSaver>) Call this to load all relevant scene data. Declaration void LoadAllData(List<ObjectSaver> objectSavers) Parameters Type Name Description List < ObjectSaver > objectSavers SaveAllData() Call this to save data during auto save or upon game pause. Declaration void SaveAllData()"
  },
  "api/GrandmaGreen.SaveSystem.JSONSaveLoader.html": {
    "href": "api/GrandmaGreen.SaveSystem.JSONSaveLoader.html",
    "title": "Class JSONSaveLoader",
    "keywords": "Class JSONSaveLoader The JSONSaveLoader was designed specifically to serialize and deserialize JSON files ONLY. This is used largely for internal testing and readable save files, but can be converted to BSON as needed. Inheritance Object JSONSaveLoader Implements ISaveLoader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public class JSONSaveLoader : ISaveLoader Constructors JSONSaveLoader(SaveController) Declaration public JSONSaveLoader(SaveController saveController) Parameters Type Name Description SaveController saveController Fields jsonDataArray Declaration public JArray jsonDataArray Field Value Type Description JArray Methods LoadAllData(List<ObjectSaver>) Declaration public void LoadAllData(List<ObjectSaver> objectSavers) Parameters Type Name Description List < ObjectSaver > objectSavers LoadData(ObjectSaver) Declaration public void LoadData(ObjectSaver os) Parameters Type Name Description ObjectSaver os SaveAllData() Declaration public void SaveAllData() SaveData(ObjectSaver) Declaration public void SaveData(ObjectSaver os) Parameters Type Name Description ObjectSaver os Implements ISaveLoader"
  },
  "api/GrandmaGreen.SaveSystem.ObjectSaver.html": {
    "href": "api/GrandmaGreen.SaveSystem.ObjectSaver.html",
    "title": "Class ObjectSaver",
    "keywords": "Class ObjectSaver The ObjectSaver interfaces with game systems directly when new data is added, changed, or removed as player's navigate the game. It is a ScriptableObject that is the core of the save system, and was designed to be editor friendly. They store pure data. Inheritance Object ObjectSaver Implements IObjectSaver Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public class ObjectSaver : ScriptableObject, IObjectSaver Fields ID Identifier number used to identify the ObjectSaver during saving and loading operations. As the hash depends on the asset's file name, no two ObjectSavers should be named alike. Declaration public string ID Field Value Type Description String saveController The reference to the game's SaveController, which it communicates with to present internal updates. Declaration public SaveController saveController Field Value Type Description SaveController Properties componentStores The component stores in question. Declaration public List<IComponentStore> componentStores { get; set; } Property Value Type Description List < IComponentStore > Methods AddComponent<T>(T) Adds a component to the appropriate ComponentStore. Stored internally, marked for update, then saved by the SaveController. This interfaces directly with game systems. Declaration public void AddComponent<T>(T component) where T : struct Parameters Type Name Description T component Type Parameters Name Description T CreateNewStore(Type) Creates a given ComponentStore for each ObjectSaver ahead of time. This is done through the Unity Editor. Utilizes reflection. The Type must be a C# data type (ie. strings, ints, structs) or it will get rejected. Declaration public void CreateNewStore(Type myType) Parameters Type Name Description Type myType OnEnable() Initializes member variables upon enabling. Declaration public void OnEnable() Implements IObjectSaver"
  },
  "api/GrandmaGreen.SaveSystem.SaveController.html": {
    "href": "api/GrandmaGreen.SaveSystem.SaveController.html",
    "title": "Class SaveController",
    "keywords": "Class SaveController The SaveController is a purely scripted C# class that gets reinstantiated everytime the game is loaded. The SaveController interfaces directly with SaveLoaders of various types as necessary. When the SaveManager calls for an AutoSave, the SaveController pings each SaveLoader to tell it to save the relevant data. Inheritance Object SaveController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public class SaveController Constructors SaveController(List<ObjectSaver>) Initializes with a list of object savers, which sets the internal list of object savers. This list changes itself as the scenes load. Declaration public SaveController(List<ObjectSaver> initialObjectSaverList) Parameters Type Name Description List < ObjectSaver > initialObjectSaverList Fields toBeSaved Every time an ObjectSaver gets \"dirtied,\" ie. a change is made to its contents, it adds itself to the toBeSaved list. This queues it up for saving at the next call. Declaration public List<ObjectSaver> toBeSaved Field Value Type Description List < ObjectSaver > Methods AutoSave() Called as necessary, primarily on an interval (determined by the Save Manager) or when the game is paused. Declaration public void AutoSave()"
  },
  "api/GrandmaGreen.SaveSystem.SaveManager.html": {
    "href": "api/GrandmaGreen.SaveSystem.SaveManager.html",
    "title": "Class SaveManager",
    "keywords": "Class SaveManager The SaveManager class is in charge of high level saving. It is the only part of the save system that lives in the game. Upon awakening, it instantiates a new SaveController. It also tracks the auto save intervals, then pings the SaveController at appropriate moments. The SaveManager also stores an internal list of every ObjectSaver relevant to the whole game. Inheritance Object SaveManager Namespace : GrandmaGreen.SaveSystem Assembly : cs.temp.dll.dll Syntax public class SaveManager : MonoBehaviour Methods Awake() Declaration public void Awake() TriggerSave() Triggers the SaveController AutoSave function. Declaration public void TriggerSave() Update() On Update, the save manager performs a check to see if the game must be saved. The game is auto saved after certain predetermined time intervals. Declaration public void Update()"
  },
  "guide/coding.html": {
    "href": "guide/coding.html",
    "title": "Coding Style Guide",
    "keywords": "Coding Style Guide Naming Conventions Names of classes, enumerations, structs, methods, and namespaces: PascalCase . public class MyClass { ... } public void MyFunction() { ... } namespace GrandmaGreen.ExampleNamespace { ... } enum MyEnum { StateOne, StateTwo } Names of properties and all variables, including local and member variables: camelCase . Private member variables should also append an m_ prefix ahead of the variable name. Similarly, static variables should append an s_ prefix ahead of the variable name. public int myInt; private string m_myString; static float s_myFloat; public void MyFunction(int myLocalVariable) { ... } Good Practice For readability, please consider the following: One statement per line. Keep opening and closing braces on their own lines. Avoid: if (condition) { DoSomething(); DoSomethingElse(); } Instead, do: if (condition) { DoSomething(); DoSomethingElse(); } We also encourage using the sealed keyword when possible. This is done to help prevent accidental derivative classes. Similarly, use structs over classes when possible. Structs are sealed and self contained. We utilize structs frequently when multi-threading, but they are good for general optimization. Our team prioritizes and values modularity and reusability . Please keep systems and classes as decoupled as possible to minimize risk of the whole game crashing when one feature bugs out. That being said, please always reach out to any of the leads or other team members if you are stuck on the best way to implement something! Remember that everything is done best with another pair of eyes. 🌻 Files and Organization Anything that needs to go on this website should go in the Assets/_GrandmaGreen/Scripts folder. The script picks up anything in this folder that has a .cs ending. File names and directory names should be in PascalCase , ie. MyFile.cs . Where possible, the name of the file should be the same as the name of the main class in the file, ie. MyClass.cs . Try to keep to one core class per file."
  },
  "guide/commenting.html": {
    "href": "guide/commenting.html",
    "title": "Commenting Code",
    "keywords": "Commenting Code Comments in code should conform to XML documentation markup standards , as this is what DocFX utilizes to transform code into readable webpages."
  },
  "index.html": {
    "href": "index.html",
    "title": "Grandma Green Documentation 🌱",
    "keywords": "Grandma Green Documentation 🌱 Welcome to Grandma Green's documentation! This page was built for old and new dev team members alike to help keep track of changes to the system. This repository has been configured to sync with changes to the Perforce depot every day at midnight PST. Any updates will then be pushed and published to the website immediately afterwards. Collaborators may also manually sync the repository and/or rebuild the website. Please contact Jamie Leodones at leodones@usc.edu for any troubles regarding this repository and its documentation, or to be added as a collaborator. 💚"
  }
}